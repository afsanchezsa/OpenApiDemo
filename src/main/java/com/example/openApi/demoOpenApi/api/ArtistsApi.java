/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.openApi.demoOpenApi.api;

import com.example.openApi.demoOpenApi.model.Artist;
import com.example.openApi.demoOpenApi.model.InlineResponse200;
import com.example.openApi.demoOpenApi.model.InlineResponse400;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-12-30T21:31:13.265268800-05:00[America/Bogota]")
@Validated
@Api(value = "artists", description = "the artists API")
public interface ArtistsApi {

    default ArtistsApiDelegate getDelegate() {
        return new ArtistsApiDelegate() {};
    }

    /**
     * GET /artists
     * Returns a list of artists
     *
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the artists to be displayed (optional)
     * @return Successfully returned a list of artists (status code 200)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "", nickname = "artistsGet", notes = "Returns a list of artists", response = Artist.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully returned a list of artists", response = Artist.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid request", response = InlineResponse400.class) })
    @GetMapping(
        value = "/artists",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Artist>> artistsGet(@ApiParam(value = "Limits the number of items on a page") @Valid @RequestParam(value = "limit", required = false) Integer limit,@ApiParam(value = "Specifies the page number of the artists to be displayed") @Valid @RequestParam(value = "offset", required = false) Integer offset) {
        return getDelegate().artistsGet(limit, offset);
    }


    /**
     * POST /artists
     * Lets a user post a new artist
     *
     * @param artist  (required)
     * @return Successfully created a new artist (status code 200)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "", nickname = "artistsPost", notes = "Lets a user post a new artist", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created a new artist"),
        @ApiResponse(code = 400, message = "Invalid request", response = InlineResponse400.class) })
    @PostMapping(
        value = "/artists",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> artistsPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Artist artist) {
        return getDelegate().artistsPost(artist);
    }


    /**
     * GET /artists/{username}
     * Obtain information about an artist from his or her unique username
     *
     * @param username  (required)
     * @return Successfully returned an artist (status code 200)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "", nickname = "artistsUsernameGet", notes = "Obtain information about an artist from his or her unique username", response = InlineResponse200.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully returned an artist", response = InlineResponse200.class),
        @ApiResponse(code = 400, message = "Invalid request", response = InlineResponse400.class) })
    @GetMapping(
        value = "/artists/{username}",
        produces = { "application/json" }
    )
    default ResponseEntity<InlineResponse200> artistsUsernameGet(@ApiParam(value = "",required=true) @PathVariable("username") String username) {
        return getDelegate().artistsUsernameGet(username);
    }

}
